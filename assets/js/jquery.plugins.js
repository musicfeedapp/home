//	stackoverflow.com/a/1026087
// —————————————————————————————————————————————————
function ucfirst(string) {
	return string.charAt(0).toUpperCase() + string.slice(1);
};



// Generate unique IDs for use as pseudo-private/protected names.
// Similar in concept to
// <http://wiki.ecmascript.org/doku.php?id=strawman:names>.
//
// The goals of this function are twofold:
// 
// * Provide a way to generate a string guaranteed to be unique when compared
//   to other strings generated by this function.
// * Make the string complex enough that it is highly unlikely to be
//   accidentally duplicated by hand (this is key if you're using `ID`
//   as a private/protected name on an object).
//
// Use:
//
//     var privateName = uID();
//     var o = { 'public': 'foo' };
//     o[privateName] = 'bar';
//
//	gist.github.com/gordonbrander/2230317
// —————————————————————————————————————————————————
var uID = function () {
  // Math.random should be unique because of its seeding algorithm.
  // Convert it to base 36 (numbers + letters), and grab the first 9 characters
  // after the decimal.
  return '_' + Math.random().toString(36).substr(2, 9);
};



//	Pick random element in jQuery collection
//	stackoverflow.com/a/3614980
// —————————————————————————————————————————————————
jQuery.fn.random = function() {
    var randomIndex = Math.floor(Math.random() * this.length);  
    return jQuery(this[randomIndex]);
};



//	Randomize order
//	stackoverflow.com/a/1533945
// —————————————————————————————————————————————————
jQuery.fn.randomize = function(child_selector) {

	return this.each(function() {
	
		var $this = $(this),
			$elems = typeof child_selector=='undefined' ? $this.children() : $this.children(child_selector);
		
		$elems.sort(function() {
			return ( Math.round(Math.random()) - 0.5 );
		});  
		
		if ( typeof child_selector=='undefined' )
			$this
				.children()
				.remove();
		else
			$this
				.remove(child_selector);  
		
		for(
			i = 0;
			i < $elems.length;
			i++
		)
			$this
				.append($elems[i]);

	});    

};



//	Format money JS
// —————————————————————————————————————————————————
//	php.js — money_format()
//	http://phpjs.org/functions/money_format/
//	https://raw.github.com/kvz/phpjs/master/functions/strings/money_format.js
// —————————————————————————————————————————————————
function money_format (format, number) {
	// http://kevin.vanzonneveld.net
	// +	 original by: Brett Zamir (http://brett-zamir.me)
	// +	 input by: daniel airton wermann (http://wermann.com.br)
	// +	 bugfixed by: Brett Zamir (http://brett-zamir.me)
	// -		depends on: setlocale
	// %					note 1: This depends on setlocale having the appropriate locale (these examples use 'en_US')
	// *		 example 1: money_format('%i', 1234.56);
	// *		 returns 1: 'USD 1,234.56'
	// *		 example 2: money_format('%14#8.2n', 1234.5678);
	// *		 returns 2: ' $			1,234.57'
	// *		 example 3: money_format('%14#8.2n', -1234.5678);
	// *		 returns 3: '-$			1,234.57'
	// *		 example 4: money_format('%(14#8.2n', 1234.5678);
	// *		 returns 4: ' $			1,234.57 '
	// *		 example 5: money_format('%(14#8.2n', -1234.5678);
	// *		 returns 5: '($			1,234.57)'
	// *		 example 6: money_format('%=014#8.2n', 1234.5678);
	// *		 returns 6: ' $000001,234.57'
	// *		 example 7: money_format('%=014#8.2n', -1234.5678);
	// *		 returns 7: '-$000001,234.57'
	// *		 example 8: money_format('%=*14#8.2n', 1234.5678);
	// *		 returns 8: ' $*****1,234.57'
	// *		 example 9: money_format('%=*14#8.2n', -1234.5678);
	// *		 returns 9: '-$*****1,234.57'
	// *		 example 10: money_format('%=*^14#8.2n', 1234.5678);
	// *		 returns 10: '	$****1234.57'
	// *		 example 11: money_format('%=*^14#8.2n', -1234.5678);
	// *		 returns 11: ' -$****1234.57'
	// *		 example 12: money_format('%=*!14#8.2n', 1234.5678);
	// *		 returns 12: ' *****1,234.57'
	// *		 example 13: money_format('%=*!14#8.2n', -1234.5678);
	// *		 returns 13: '-*****1,234.57'
	// *		 example 14: money_format('%i', 3590);
	// *		 returns 14: ' USD 3,590.00'

	// Per PHP behavior, there seems to be no extra padding for sign when there is a positive number, though my
	// understanding of the description is that there should be padding; need to revisit examples

	// Helpful info at http://ftp.gnu.org/pub/pub/old-gnu/Manuals/glibc-2.2.3/html_chapter/libc_7.html and http://publib.boulder.ibm.com/infocenter/zos/v1r10/index.jsp?topic=/com.ibm.zos.r10.bpxbd00/strfmp.htm

	if (typeof number !== 'number') {
		return null;
	}
	var regex = /%((=.|[+^(!-])*?)(\d*?)(#(\d+))?(\.(\d+))?([in%])/g; // 1: flags, 3: width, 5: left, 7: right, 8: conversion

	this.setlocale('LC_ALL', 0); // Ensure the locale data we need is set up
	var monetary = this.php_js.locales[this.php_js.localeCategories['LC_MONETARY']]['LC_MONETARY'];

	var doReplace = function (n0, flags, n2, width, n4, left, n6, right, conversion) {
		var value = '',
			repl = '';
		if (conversion === '%') { // Percent does not seem to be allowed with intervening content
			return '%';
		}
		var fill = flags && (/=./).test(flags) ? flags.match(/=(.)/)[1] : ' '; // flag: =f (numeric fill)
		var showCurrSymbol = !flags || flags.indexOf('!') === -1; // flag: ! (suppress currency symbol)
		width = parseInt(width, 10) || 0; // field width: w (minimum field width)

		var neg = number < 0;
		number = number + ''; // Convert to string
		number = neg ? number.slice(1) : number; // We don't want negative symbol represented here yet

		var decpos = number.indexOf('.');
		var integer = decpos !== -1 ? number.slice(0, decpos) : number; // Get integer portion
		var fraction = decpos !== -1 ? number.slice(decpos + 1) : ''; // Get decimal portion

		var _str_splice = function (integerStr, idx, thous_sep) {
			var integerArr = integerStr.split('');
			integerArr.splice(idx, 0, thous_sep);
			return integerArr.join('');
		};

		var init_lgth = integer.length;
		left = parseInt(left, 10);
		var filler = init_lgth < left;
		if (filler) {
			var fillnum = left - init_lgth;
			integer = new Array(fillnum + 1).join(fill) + integer;
		}
		if (flags.indexOf('^') === -1) { // flag: ^ (disable grouping characters (of locale))
			// use grouping characters
			var thous_sep = monetary.mon_thousands_sep; // ','
			var mon_grouping = monetary.mon_grouping; // [3] (every 3 digits in U.S.A. locale)

			if (mon_grouping[0] < integer.length) {
				for (var i = 0, idx = integer.length; i < mon_grouping.length; i++) {
					idx -= mon_grouping[i]; // e.g., 3
					if (idx <= 0) {
						break;
					}
					if (filler && idx < fillnum) {
						thous_sep = fill;
					}
					integer = _str_splice(integer, idx, thous_sep);
				}
			}
			if (mon_grouping[i - 1] > 0) { // Repeating last grouping (may only be one) until highest portion of integer reached
				while (idx > mon_grouping[i - 1]) {
					idx -= mon_grouping[i - 1];
					if (filler && idx < fillnum) {
						thous_sep = fill;
					}
					integer = _str_splice(integer, idx, thous_sep);
				}
			}
		}

		// left, right
		if (right === '0') { // No decimal or fractional digits
			value = integer;
		} else {
			var dec_pt = monetary.mon_decimal_point; // '.'
			if (right === '' || right === undefined) {
				right = conversion === 'i' ? monetary.int_frac_digits : monetary.frac_digits;
			}
			right = parseInt(right, 10);

			if (right === 0) { // Only remove fractional portion if explicitly set to zero digits
				fraction = '';
				dec_pt = '';
			} else if (right < fraction.length) {
				fraction = Math.round(parseFloat(fraction.slice(0, right) + '.' + fraction.substr(right, 1))) + '';
				if (right > fraction.length) {
					fraction = new Array(right - fraction.length + 1).join('0') + fraction; // prepend with 0's
				}
			} else if (right > fraction.length) {
				fraction += new Array(right - fraction.length + 1).join('0'); // pad with 0's
			}
			value = integer + dec_pt + fraction;
		}

		var symbol = '';
		if (showCurrSymbol) {
			symbol = conversion === 'i' ? monetary.int_curr_symbol : monetary.currency_symbol; // 'i' vs. 'n' ('USD' vs. '$')
		}
		var sign_posn = neg ? monetary.n_sign_posn : monetary.p_sign_posn;

		// 0: no space between curr. symbol and value
		// 1: space sep. them unless symb. and sign are adjacent then space sep. them from value
		// 2: space sep. sign and value unless symb. and sign are adjacent then space separates
		var sep_by_space = neg ? monetary.n_sep_by_space : monetary.p_sep_by_space;

		// p_cs_precedes, n_cs_precedes // positive currency symbol follows value = 0; precedes value = 1
		var cs_precedes = neg ? monetary.n_cs_precedes : monetary.p_cs_precedes;

		// Assemble symbol/value/sign and possible space as appropriate
		if (flags.indexOf('(') !== -1) { // flag: parenth. for negative
			// Fix: unclear on whether and how sep_by_space, sign_posn, or cs_precedes have
			// an impact here (as they do below), but assuming for now behaves as sign_posn 0 as
			// far as localized sep_by_space and sign_posn behavior
			repl = (cs_precedes ? symbol + (sep_by_space === 1 ? ' ' : '') : '') + value + (!cs_precedes ? (sep_by_space === 1 ? ' ' : '') + symbol : '');
			if (neg) {
				repl = '(' + repl + ')';
			} else {
				repl = ' ' + repl + ' ';
			}
		} else { // '+' is default
			var pos_sign = monetary.positive_sign; // ''
			var neg_sign = monetary.negative_sign; // '-'
			var sign = neg ? (neg_sign) : (pos_sign);
			var otherSign = neg ? (pos_sign) : (neg_sign);
			var signPadding = '';
			if (sign_posn) { // has a sign
				signPadding = new Array(otherSign.length - sign.length + 1).join(' ');
			}

			var valueAndCS = '';
			switch (sign_posn) {
				// 0: parentheses surround value and curr. symbol;
				// 1: sign precedes them;
				// 2: sign follows them;
				// 3: sign immed. precedes curr. symbol; (but may be space between)
				// 4: sign immed. succeeds curr. symbol; (but may be space between)
			case 0:
				valueAndCS = cs_precedes ? symbol + (sep_by_space === 1 ? ' ' : '') + value : value + (sep_by_space === 1 ? ' ' : '') + symbol;
				repl = '(' + valueAndCS + ')';
				break;
			case 1:
				valueAndCS = cs_precedes ? symbol + (sep_by_space === 1 ? ' ' : '') + value : value + (sep_by_space === 1 ? ' ' : '') + symbol;
				repl = signPadding + sign + (sep_by_space === 2 ? ' ' : '') + valueAndCS;
				break;
			case 2:
				valueAndCS = cs_precedes ? symbol + (sep_by_space === 1 ? ' ' : '') + value : value + (sep_by_space === 1 ? ' ' : '') + symbol;
				repl = valueAndCS + (sep_by_space === 2 ? ' ' : '') + sign + signPadding;
				break;
			case 3:
				repl = cs_precedes ? signPadding + sign + (sep_by_space === 2 ? ' ' : '') + symbol + (sep_by_space === 1 ? ' ' : '') + value : value + (sep_by_space === 1 ? ' ' : '') + sign + signPadding + (sep_by_space === 2 ? ' ' : '') + symbol;
				break;
			case 4:
				repl = cs_precedes ? symbol + (sep_by_space === 2 ? ' ' : '') + signPadding + sign + (sep_by_space === 1 ? ' ' : '') + value : value + (sep_by_space === 1 ? ' ' : '') + symbol + (sep_by_space === 2 ? ' ' : '') + sign + signPadding;
				break;
			}
		}

		var padding = width - repl.length;
		if (padding > 0) {
			padding = new Array(padding + 1).join(' ');
			// Fix: How does p_sep_by_space affect the count if there is a space? Included in count presumably?
			if (flags.indexOf('-') !== -1) { // left-justified (pad to right)
				repl += padding;
			} else { // right-justified (pad to left)
				repl = padding + repl;
			}
		}
		return repl;
	};

	return format.replace(regex, doReplace);
};

Number.prototype.format_money = function(short, round) {

		short = typeof short==='undefined' ? true : false;
		round = typeof round==='undefined'||isNaN(round) ? 0 : round;
		
		var currency = '$';
		//var money_format = '%.1n';
	
		if(this>1000000000000)
			return currency + Math.round((this/1000000000000)*(round?Math.pow(10,round):15))/(round?Math.pow(10,round):15) + (short?'t':' trillion');
			
		else if (this>1000000000)
			return currency + Math.round((this/1000000000)*(round?Math.pow(10,round):12))/(round?Math.pow(10,round):12) + (short?'b':' billion');
		
		else if (this>1000000)
			return currency + Math.round((this/1000000)*(round?Math.pow(10,round):6))/(round?Math.pow(10,round):6) + (short?'m':' million');
		
		else if (this>1000)
			return currency + Math.round((this/1000)*(round?Math.pow(10,round):3))/(round?Math.pow(10,round):3) + (short?'k':'k');
		
		return currency+this;
};





//	stackoverflow.com/a/12806373
// —————————————————————————————————————————————————
Number.prototype.between = function (min, max) {
	return this >= min && this <= max;
};





//	stackoverflow.com/a/6234804
// —————————————————————————————————————————————————
String.prototype.escapeHtml = function() {
	return this
		.replace(/&/g, "&amp;")
		.replace(/</g, "&lt;")
		.replace(/>/g, "&gt;")
		.replace(/"/g, "&quot;")
		.replace(/'/g, "&#039;");
};





//	stackoverflow.com/a/6021027
// —————————————————————————————————————————————————
String.prototype.updateQueryStringParameter = function(key, value) {
	var uri = this,
		re = new RegExp("([?|&])" + key + "=.*?(&|$)", "i"),
		separator = uri.indexOf('?') !== -1 ? "&" : "?";
		
	if ( uri.match(re) )
		return uri.replace(re, '$1'+key+"="+value+'$2');
	else
		return uri+separator+key+"="+value;

};





//	stackoverflow.com/a/6416527
// —————————————————————————————————————————————————
jQuery.fn.getStyleObject = function(){
	// the map to return with requested styles and values as KVP
	var product = {};
	
	// the style object from the DOM element we need to iterate through
	var style;
	
	// recycle the name of the style attribute
	var name;
	
	// if it's a limited list, no need to run through the entire style object
	if(only && only instanceof Array){
		
		for(var i = 0, l = only.length; i < l; i++){
			// since we have the name already, just return via built-in .css method
			name = only[i];
			product[name] = this.css(name);
		}
		
	} else {
		
		// otherwise, we need to get everything
		var dom = this.get(0);
		
		// standards
		if (window.getComputedStyle) {
			
			// convenience methods to turn css case ('background-image') to camel ('backgroundImage')
			var pattern = /\-([a-z])/g;
			var uc = function (a, b) {
					return b.toUpperCase();
			};				
			var camelize = function(string){
				return string.replace(pattern, uc);
			};
			
			// make sure we're getting a good reference
			if (style = window.getComputedStyle(dom, null)) {
				var camel, value;
				// opera doesn't give back style.length - use truthy since a 0 length may as well be skipped anyways
				if (style.length) {
					for (var i = 0, l = style.length; i < l; i++) {
						name = style[i];
						camel = camelize(name);
						value = style.getPropertyValue(name);
						product[camel] = value;
					}
				} else {
					// opera
					for (name in style) {
						camel = camelize(name);
						value = style.getPropertyValue(name) || style[name];
						product[camel] = value;
					}
				}
			}
		}
		// IE - first try currentStyle, then normal style object - don't bother with runtimeStyle
		else if (style = dom.currentStyle) {
			for (name in style) {
				product[name] = style[name];
			}
		}
		else if (style = dom.style) {
			for (name in style) {
				if (typeof style[name] != 'function') {
					product[name] = style[name];
				}
			}
		}
		
	}
	
	// remove any styles specified...
	// be careful on blacklist - sometimes vendor-specific values aren't obvious but will be visible...	 e.g., excepting 'color' will still let '-webkit-text-fill-color' through, which will in fact color the text
	if(except && except instanceof Array){
		for(var i = 0, l = except.length; i < l; i++){
			name = except[i];
			delete product[name];
		}
	}
	
	// one way out so we can process blacklist in one spot
	return product;
}

// sugar - source is the selector, dom element or jQuery instance to copy from - only and except are optional
// —————————————————————————————————————————————————
jQuery.fn.copyCSS = function(source, only, except){
	var styles = $(source).getStyles(only, except);
	this.css(styles);
};





//	throttledresize: special jQuery event that
//	happens at a reduced rate compared to "resize"
// —————————————————————————————————————————————————	
//	latest version and complete README available on Github:
//	https://github.com/louisremi/jquery-smartresize
// —————————————————————————————————————————————————
(function($){
	
	var $event = $.event,
		$special,
		dummy = {_: 0},
		frame = 0,
		wasResized, animRunning;
	
	$special = $event.special.throttledresize = {
		setup: function() {
			$(this).on('resize', $special.handler);
		},
		teardown: function() {
			$(this).off('resize', $special.handler);
		},
		handler: function( event, execAsap ) {
			// Save the context
			var context = this,
				args = arguments;
	
			wasResized = true;
	
			if (!animRunning) {
				setInterval(function(){
					frame++;
	
					if ( frame > $special.threshold && wasResized || execAsap ) {
						// set correct event type
						event.type = 'throttledresize';
						$event.dispatch.apply( context, args );
						wasResized = false;
						frame = 0;
					}
					if ( frame > 9 ) {
						$(dummy).stop();
						animRunning = false;
						frame = 0;
					}
				}, 30);
				animRunning = true;
			}
		},
		threshold: 0
	};
	
})( jQuery );





//	gist.github.com/db/966388
//	adds progress event to jQuery.ajax():
// —————————————————————————————————————————————————
//	jQuery.ajax({
//		 url: "./json.js",
//		 type: "GET",
//		 dataType: "json",
//		 complete: function() { console.log("Completed."); },
//		 progress: function(evt) {
//		 if (evt.lengthComputable) {
//					console.log("Loaded " + parseInt( (evt.loaded / evt.total * 100), 10) + "%");
//		 }
//		 else {
//					console.log("Length not computable.");
//		 }
//		 }
//	});
// —————————————————————————————————————————————————
var originalXhr = jQuery.ajaxSettings.xhr;
jQuery.ajaxSetup({
	progress: function() { /*console.log("standard progress callback");*/ },
	xhr: function() {
		var req = originalXhr(),
			that = this;
			
		if (req) {
			 if (typeof req.addEventListener == "function") {
			req.addEventListener("progress", function(evt) {
					 that.progress(evt);
			},false);
			 }
		}
		return req;
	}
});





//	http://stackoverflow.com/a/16324762
//	http://jsfiddle.net/TroyAlford/4wrxq/1
// —————————————————————————————————————————————————
jQuery.fn.preventParentScroll = function(activate) {
	
	if (typeof activate == 'undefined')
		activate = true;
		
	return this.each(function() {
		if (activate) {
			jQuery(this)
				.addClass('start')
				.off('DOMMouseScroll')
				.off('mousewheel')
				.on('DOMMouseScroll mousewheel', function(ev) {
					var $this = jQuery(this),
						is_scrollable = $this.css('overflow')!='hidden';
					
					if (!is_scrollable)
						return;
					
					var scrollTop = this.scrollTop,
						 scrollHeight = this.scrollHeight,
						 height = $this.height(),
						 delta = ev.originalEvent.wheelDelta,
						 up = delta > 0;
				
					var prevent = function() {
						 ev.stopPropagation();
						 ev.preventDefault();
						 return false;
					}
					
					if (!up && -delta > scrollHeight - height - scrollTop) {
						 // Scrolling down, but this will take us past the bottom.
						 $this.removeClass('start').scrollTop(scrollHeight);
						 return prevent();
					} else if (up && delta > scrollTop) {
						 // Scrolling up, but this will take us past the top.
						 $this.addClass('start').scrollTop(0);
						 return prevent();
					} else {
						 $this.removeClass('start');
					}
					 });
		} else {
			jQuery(this)
				.removeClass('start')
				.off('DOMMouseScroll')
				.off('mousewheel');
		}
	});
};





//	unwrapInner function
//	http://wowmotty.blogspot.com/2012/07/jquery-unwrapinner.html
// —————————————————————————————————————————————————
jQuery.fn.extend({
    unwrapInner: function(selector) {
        return this.each(function() {
            var t = this,
                c = jQuery(t).children(selector);
            if (c.length === 1) {
                c.contents().appendTo(t);
                c.remove();
            }
        });
    }
});





//	stackoverflow.com/a/10559271
// —————————————————————————————————————————————————
jQuery.fn.hasAnyClass = function() {
	for (var i = 0; i < arguments.length; i++) {
		if (this.hasClass(arguments[i])) {
			return true;
		}
	}
	return false;
};





//	stackoverflow.com/a/2587356
// —————————————————————————————————————————————————
jQuery.fn.cleanWhitespace = function() {
	textNodes = this.contents().filter(function() {
		return (this.nodeType == 3 && !/\S/.test(this.nodeValue));
	}).remove();
	return this;
};





//	Auto-growing textareas; technique ripped from Facebook
//	http://github.com/jaz303/jquery-grab-bag/tree/master/javascripts/jquery.autogrow-textarea.js
// —————————————————————————————————————————————————
jQuery.fn.autoGrow = function(options) {
	return this.filter('textarea').each(function() {
		var self		 = this;
		var $self		 = jQuery(self);
		var minHeight	 = $self.height();
		var noFlickerPad = 0; //$self.hasClass('autogrow-short') ? 0 : parseInt($self.css('lineHeight')) || 0;

		var shadow = jQuery('<div></div>').css({
			position:	 'absolute',
			top:		 -10000,
			left:		 -10000,
			width:		 $self.width(),
			fontSize:	 $self.css('fontSize'),
			fontFamily:	 $self.css('fontFamily'),
			fontWeight:	 $self.css('fontWeight'),
			lineHeight:	 $self.css('lineHeight'),
			resize:		 'none',
			'word-wrap': 'break-word'
		}).appendTo(document.body);

		var update = function(event) {
			var times = function(string, number) {
				for (var i=0, r=''; i<number; i++) r += string;
				return r;
			};

			var val = self.value.replace(/</g, '&lt;')
								.replace(/>/g, '&gt;')
								.replace(/&/g, '&amp;')
								.replace(/\n$/, '<br/>&nbsp;')
								.replace(/\n/g, '<br/>')
								.replace(/ {2,}/g, function(space){ return times('&nbsp;', space.length - 1) + ' ' });

			// Did enter get pressed?	Resize in this keydown event so that the flicker doesn't occur.
			if (event && event.data && event.data.event === 'keydown' && event.keyCode === 13) {
				val += '<br />';
			}

			shadow.css('width', $self.width());
			shadow.html(val + (noFlickerPad === 0 ? '...' : '')); // Append '...' to resize pre-emptively.
			$self.height(Math.max(shadow.height() + noFlickerPad, minHeight));
		}

		$self.change(update).keyup(update).keydown({event:'keydown'},update);
		jQuery(window).resize(update);

		update();
	});
};




